stdout of test 'LIMIT_OFFSET_big-endian.Bug-2622` in directory 'sql/test/BugTracker-2010` itself:


# 21:05:24 >  
# 21:05:24 >   mserver5 "--config=/ufs/manegold/_/scratch0/Monet/HG/Jun2010/prefix.--enable-strict_--disable-debug_--enable-optimize_--enable-assert/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/ufs/manegold/_/scratch0/Monet/HG/Jun2010/prefix.--enable-strict_--disable-debug_--enable-optimize_--enable-assert/lib64/MonetDB5:/ufs/manegold/_/scratch0/Monet/HG/Jun2010/prefix.--enable-strict_--disable-debug_--enable-optimize_--enable-assert/lib64/MonetDB5/lib:/ufs/manegold/_/scratch0/Monet/HG/Jun2010/prefix.--enable-strict_--disable-debug_--enable-optimize_--enable-assert/lib64/MonetDB5/bin" --set "gdk_dbfarm=/ufs/manegold/_/scratch0/Monet/HG/Jun2010/prefix.--enable-strict_--disable-debug_--enable-optimize_--enable-assert/var/MonetDB5/dbfarm"  --set mapi_open=true --set xrpc_open=true --set mapi_port=38140 --set xrpc_port=48203 --set monet_prompt= --set mal_listing=2 --trace  "--dbname=mTests_src_test_BugTracker-2010" --set mal_listing=0 ; echo ; echo Over..
# 21:05:24 >  

# MonetDB server v5.20.3, based on kernel v1.38.3
# Serving database 'mTests_src_test_BugTracker-2010', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 7.751 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://rig.ins.cwi.nl:38140/
# MonetDB/SQL module v2.38.3 loaded
# MonetDB/GIS module v0.18.3 loaded

Ready.


# 21:05:24 >  
# 21:05:24 >  mclient -lsql -ftest -i -e --host=rig --port=38140 
# 21:05:24 >  

[ 1	]
[ 1	]
[ 1	]
[ 1	]

#PLAN select * from oblo;
% .plan # table_name
% rel # name
% clob # type
% 39 # length
project (
| table(sys.oblo) [ "oblo"."a" ] COUNT 
) [ "oblo"."a" ]
#PLAN select * from oblo OFFSET 2;
% .plan # table_name
% rel # name
% clob # type
% 41 # length
top N (
| project (
| | table(sys.oblo) [ "oblo"."a" ] COUNT 
| ) [ "oblo"."a" ]
) [ bigint "2" ]
#PLAN select * from oblo LIMIT 2;
% .plan # table_name
% rel # name
% clob # type
% 41 # length
top N (
| project (
| | table(sys.oblo) [ "oblo"."a" ] COUNT 
| ) [ "oblo"."a" ]
) [ bigint "2" ]
#PLAN select * from oblo LIMIT 1 OFFSET 2;
% .plan # table_name
% rel # name
% clob # type
% 41 # length
top N (
| project (
| | table(sys.oblo) [ "oblo"."a" ] COUNT 
| ) [ "oblo"."a" ]
) [ bigint "1", bigint "2" ]
#PLAN select * from oblo LIMIT 2 OFFSET 1;
% .plan # table_name
% rel # name
% clob # type
% 41 # length
top N (
| project (
| | table(sys.oblo) [ "oblo"."a" ] COUNT 
| ) [ "oblo"."a" ]
) [ bigint "2", bigint "1" ]
#PLAN select * from oblo ORDER BY a;
% .plan # table_name
% rel # name
% clob # type
% 39 # length
project (
| table(sys.oblo) [ "oblo"."a" ] COUNT 
) [ "oblo"."a" ] [ "oblo"."a" ASC ]
#PLAN select * from oblo ORDER BY a OFFSET 2;
% .plan # table_name
% rel # name
% clob # type
% 41 # length
top N (
| project (
| | table(sys.oblo) [ "oblo"."a" ] COUNT 
| ) [ "oblo"."a" ] [ "oblo"."a" ASC ]
) [ bigint "2" ]
#PLAN select * from oblo ORDER BY a LIMIT 2;
% .plan # table_name
% rel # name
% clob # type
% 41 # length
top N (
| project (
| | table(sys.oblo) [ "oblo"."a" ] COUNT 
| ) [ "oblo"."a" ] [ "oblo"."a" ASC ]
) [ bigint "2" ]
#PLAN select * from oblo ORDER BY a LIMIT 2 OFFSET 1;
% .plan # table_name
% rel # name
% clob # type
% 41 # length
top N (
| project (
| | table(sys.oblo) [ "oblo"."a" ] COUNT 
| ) [ "oblo"."a" ] [ "oblo"."a" ASC ]
) [ bigint "2", bigint "1" ]
#PLAN select * from oblo ORDER BY a LIMIT 1 OFFSET 2;
% .plan # table_name
% rel # name
% clob # type
% 41 # length
top N (
| project (
| | table(sys.oblo) [ "oblo"."a" ] COUNT 
| ) [ "oblo"."a" ] [ "oblo"."a" ASC ]
) [ bigint "1", bigint "2" ]
#EXPLAIN select * from oblo;
% .explain # table_name
% mal # name
% clob # type
% 114 # length
function user.s8_1():void;
    X_1:void := querylog.define("explain select * from oblo;":str, "minimal_pipe":str, 21:int);
    X_4:int := sql.mvc();
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "oblo":str);
    X_8:bat[:int] := sql.bind(X_4:int, "sys":str, "oblo":str, "a":str, 0:int);
    X_11:bat[:int] := sql.emptybind(X_4:int, "sys":str, "oblo":str, "a":str, 1:int);
    (X_13:bat[:oid], X_14:bat[:int]) := sql.emptybind(X_4:int, "sys":str, "oblo":str, "a":str, 2:int);
    X_16:bat[:int] := sql.delta(X_8:bat[:int], X_13:bat[:oid], X_14:bat[:int], X_11:bat[:int]);
    X_17:bat[:int] := algebra.projection(C_5:bat[:oid], X_16:bat[:int]);
    X_19:bat[:str] := bat.new(nil:str);
    X_21:bat[:str] := bat.new(nil:str);
    X_22:bat[:str] := bat.new(nil:str);
    X_23:bat[:int] := bat.new(nil:int);
    X_25:bat[:int] := bat.new(nil:int);
    X_26:bat[:str] := bat.append(X_19:bat[:str], "sys.oblo":str);
    X_28:bat[:str] := bat.append(X_21:bat[:str], "a":str);
    X_29:bat[:str] := bat.append(X_22:bat[:str], "int":str);
    X_31:bat[:int] := bat.append(X_23:bat[:int], 32:int);
    X_33:bat[:int] := bat.append(X_25:bat[:int], 0:int);
    sql.resultSet(X_26:bat[:str], X_28:bat[:str], X_29:bat[:str], X_31:bat[:int], X_33:bat[:int], X_17:bat[:int]);
end user.s8_1;
#inline               actions= 0 time=3 usec 
#candidates           actions= 1 time=22 usec 
#remap                actions= 0 time=5 usec 
#deadcode             actions= 0 time=9 usec 
#multiplex            actions= 0 time=4 usec 
#generator            actions= 0 time=3 usec 
#profiler             actions= 1 time=20 usec 
#garbageCollector     actions= 1 time=27 usec 
#total                actions= 1 time=128 usec 
#EXPLAIN select * from oblo OFFSET 2;
% .explain # table_name
% mal # name
% clob # type
% 114 # length
function user.s10_1():void;
    X_1:void := querylog.define("explain select * from oblo offset 2;":str, "minimal_pipe":str, 27:int);
    X_4:int := sql.mvc();
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "oblo":str);
    X_8:bat[:int] := sql.bind(X_4:int, "sys":str, "oblo":str, "a":str, 0:int);
    X_11:bat[:int] := sql.emptybind(X_4:int, "sys":str, "oblo":str, "a":str, 1:int);
    (X_13:bat[:oid], X_14:bat[:int]) := sql.emptybind(X_4:int, "sys":str, "oblo":str, "a":str, 2:int);
    X_16:bat[:int] := sql.delta(X_8:bat[:int], X_13:bat[:oid], X_14:bat[:int], X_11:bat[:int]);
    X_17:bat[:int] := algebra.projection(C_5:bat[:oid], X_16:bat[:int]);
    X_18:lng := calc.lng(2:lng);
    X_20:lng := calc.lng(nil:lng);
    X_22:lng := calc.+(X_18:lng, X_20:lng);
    X_23:lng := calc.-(X_22:lng, 1:int);
    C_24:bat[:oid] := algebra.subslice(X_17:bat[:int], X_18:lng, X_23:lng);
    X_25:bat[:int] := algebra.projection(C_24:bat[:oid], X_17:bat[:int]);
    X_27:bat[:str] := bat.new(nil:str);
    X_29:bat[:str] := bat.new(nil:str);
    X_30:bat[:str] := bat.new(nil:str);
    X_31:bat[:int] := bat.new(nil:int);
    X_33:bat[:int] := bat.new(nil:int);
    X_34:bat[:str] := bat.append(X_27:bat[:str], "sys.oblo":str);
    X_36:bat[:str] := bat.append(X_29:bat[:str], "a":str);
    X_37:bat[:str] := bat.append(X_30:bat[:str], "int":str);
    X_39:bat[:int] := bat.append(X_31:bat[:int], 32:int);
    X_41:bat[:int] := bat.append(X_33:bat[:int], 0:int);
    sql.resultSet(X_34:bat[:str], X_36:bat[:str], X_37:bat[:str], X_39:bat[:int], X_41:bat[:int], X_25:bat[:int]);
end user.s10_1;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=2 usec 
#deadcode             actions= 0 time=5 usec 
#multiplex            actions= 0 time=1 usec 
#profiler             actions= 1 time=1 usec 
#candidates           actions= 1 time=0 usec 
#garbagecollector     actions= 1 time=24 usec 
#total                actions= 8 time=68 usec 
#EXPLAIN select * from oblo LIMIT 2;
% .explain # table_name
% mal # name
% clob # type
% 114 # length
function user.s12_1():void;
    X_1:void := querylog.define("explain select * from oblo limit 2;":str, "minimal_pipe":str, 28:int);
    X_4:int := sql.mvc();
    C_7:bat[:oid] := sql.tid(X_4:int, "sys":str, "oblo":str);
    X_10:bat[:int] := sql.bind(X_4:int, "sys":str, "oblo":str, "a":str, 0:int);
    X_13:bat[:int] := sql.emptybind(X_4:int, "sys":str, "oblo":str, "a":str, 1:int);
    (X_15:bat[:oid], X_16:bat[:int]) := sql.emptybind(X_4:int, "sys":str, "oblo":str, "a":str, 2:int);
    X_18:bat[:int] := sql.delta(X_10:bat[:int], X_15:bat[:oid], X_16:bat[:int], X_13:bat[:int]);
    X_19:bat[:int] := algebra.projection(C_7:bat[:oid], X_18:bat[:int]);
    X_20:lng := calc.lng(2:lng);
    X_21:lng := calc.lng(0:lng);
    X_23:lng := calc.+(X_21:lng, X_20:lng);
    X_24:lng := calc.-(X_23:lng, 1:int);
    C_25:bat[:oid] := algebra.subslice(X_19:bat[:int], X_21:lng, X_24:lng);
    X_26:bat[:int] := algebra.projection(C_25:bat[:oid], X_19:bat[:int]);
    X_28:bat[:str] := bat.new(nil:str);
    X_30:bat[:str] := bat.new(nil:str);
    X_31:bat[:str] := bat.new(nil:str);
    X_32:bat[:int] := bat.new(nil:int);
    X_34:bat[:int] := bat.new(nil:int);
    X_35:bat[:str] := bat.append(X_28:bat[:str], "sys.oblo":str);
    X_37:bat[:str] := bat.append(X_30:bat[:str], "a":str);
    X_38:bat[:str] := bat.append(X_31:bat[:str], "int":str);
    X_40:bat[:int] := bat.append(X_32:bat[:int], 32:int);
    X_42:bat[:int] := bat.append(X_34:bat[:int], 0:int);
    sql.resultSet(X_35:bat[:str], X_37:bat[:str], X_38:bat[:str], X_40:bat[:int], X_42:bat[:int], X_26:bat[:int]);
end user.s12_1;
#inline               actions= 0 time=2 usec 
#candidates           actions= 1 time=27 usec 
#remap                actions= 0 time=5 usec 
#deadcode             actions= 0 time=10 usec 
#multiplex            actions= 0 time=4 usec 
#generator            actions= 0 time=2 usec 
#profiler             actions= 1 time=26 usec 
#garbageCollector     actions= 1 time=35 usec 
#total                actions= 1 time=149 usec 
#EXPLAIN select * from oblo LIMIT 1 OFFSET 2;
% .explain # table_name
% mal # name
% clob # type
% 114 # length
function user.s14_1():void;
    X_1:void := querylog.define("explain select * from oblo limit 1 offset 2;":str, "minimal_pipe":str, 30:int);
    X_4:int := sql.mvc();
    C_10:bat[:oid] := sql.tid(X_4:int, "sys":str, "oblo":str);
    X_13:bat[:int] := sql.bind(X_4:int, "sys":str, "oblo":str, "a":str, 0:int);
    X_16:bat[:int] := sql.emptybind(X_4:int, "sys":str, "oblo":str, "a":str, 1:int);
    (X_18:bat[:oid], X_19:bat[:int]) := sql.emptybind(X_4:int, "sys":str, "oblo":str, "a":str, 2:int);
    X_21:bat[:int] := sql.delta(X_13:bat[:int], X_18:bat[:oid], X_19:bat[:int], X_16:bat[:int]);
    X_22:bat[:int] := algebra.projection(C_10:bat[:oid], X_21:bat[:int]);
    X_23:lng := calc.lng(1:lng);
    X_24:lng := calc.lng(2:lng);
    X_25:lng := calc.+(X_24:lng, X_23:lng);
    X_26:lng := calc.-(X_25:lng, 1:int);
    C_27:bat[:oid] := algebra.subslice(X_22:bat[:int], X_24:lng, X_26:lng);
    X_28:bat[:int] := algebra.projection(C_27:bat[:oid], X_22:bat[:int]);
    X_30:bat[:str] := bat.new(nil:str);
    X_32:bat[:str] := bat.new(nil:str);
    X_33:bat[:str] := bat.new(nil:str);
    X_34:bat[:int] := bat.new(nil:int);
    X_36:bat[:int] := bat.new(nil:int);
    X_37:bat[:str] := bat.append(X_30:bat[:str], "sys.oblo":str);
    X_39:bat[:str] := bat.append(X_32:bat[:str], "a":str);
    X_40:bat[:str] := bat.append(X_33:bat[:str], "int":str);
    X_42:bat[:int] := bat.append(X_34:bat[:int], 32:int);
    X_44:bat[:int] := bat.append(X_36:bat[:int], 0:int);
    sql.resultSet(X_37:bat[:str], X_39:bat[:str], X_40:bat[:str], X_42:bat[:int], X_44:bat[:int], X_28:bat[:int]);
end user.s14_1;
#inline               actions= 0 time=3 usec 
#candidates           actions= 1 time=27 usec 
#remap                actions= 0 time=5 usec 
#deadcode             actions= 0 time=9 usec 
#multiplex            actions= 0 time=4 usec 
#generator            actions= 0 time=3 usec 
#profiler             actions= 1 time=26 usec 
#garbageCollector     actions= 1 time=45 usec 
#total                actions= 1 time=160 usec 
#EXPLAIN select * from oblo LIMIT 2 OFFSET 1;
% .explain # table_name
% mal # name
% clob # type
% 114 # length
function user.s16_1():void;
    X_1:void := querylog.define("explain select * from oblo limit 2 offset 1;":str, "minimal_pipe":str, 30:int);
    X_4:int := sql.mvc();
    C_10:bat[:oid] := sql.tid(X_4:int, "sys":str, "oblo":str);
    X_13:bat[:int] := sql.bind(X_4:int, "sys":str, "oblo":str, "a":str, 0:int);
    X_16:bat[:int] := sql.emptybind(X_4:int, "sys":str, "oblo":str, "a":str, 1:int);
    (X_18:bat[:oid], X_19:bat[:int]) := sql.emptybind(X_4:int, "sys":str, "oblo":str, "a":str, 2:int);
    X_21:bat[:int] := sql.delta(X_13:bat[:int], X_18:bat[:oid], X_19:bat[:int], X_16:bat[:int]);
    X_22:bat[:int] := algebra.projection(C_10:bat[:oid], X_21:bat[:int]);
    X_23:lng := calc.lng(2:lng);
    X_24:lng := calc.lng(1:lng);
    X_25:lng := calc.+(X_24:lng, X_23:lng);
    X_26:lng := calc.-(X_25:lng, 1:int);
    C_27:bat[:oid] := algebra.subslice(X_22:bat[:int], X_24:lng, X_26:lng);
    X_28:bat[:int] := algebra.projection(C_27:bat[:oid], X_22:bat[:int]);
    X_30:bat[:str] := bat.new(nil:str);
    X_32:bat[:str] := bat.new(nil:str);
    X_33:bat[:str] := bat.new(nil:str);
    X_34:bat[:int] := bat.new(nil:int);
    X_36:bat[:int] := bat.new(nil:int);
    X_37:bat[:str] := bat.append(X_30:bat[:str], "sys.oblo":str);
    X_39:bat[:str] := bat.append(X_32:bat[:str], "a":str);
    X_40:bat[:str] := bat.append(X_33:bat[:str], "int":str);
    X_42:bat[:int] := bat.append(X_34:bat[:int], 32:int);
    X_44:bat[:int] := bat.append(X_36:bat[:int], 0:int);
    sql.resultSet(X_37:bat[:str], X_39:bat[:str], X_40:bat[:str], X_42:bat[:int], X_44:bat[:int], X_28:bat[:int]);
end user.s16_1;
#inline               actions= 0 time=3 usec 
#candidates           actions= 1 time=27 usec 
#remap                actions= 0 time=5 usec 
#deadcode             actions= 0 time=9 usec 
#multiplex            actions= 0 time=4 usec 
#generator            actions= 0 time=2 usec 
#profiler             actions= 1 time=25 usec 
#garbageCollector     actions= 1 time=34 usec 
#total                actions= 1 time=144 usec 
#EXPLAIN select * from oblo ORDER BY a;
% .explain # table_name
% mal # name
% clob # type
% 114 # length
function user.s18_1():void;
    X_1:void := querylog.define("explain select * from oblo order by a;":str, "minimal_pipe":str, 23:int);
    X_4:int := sql.mvc();
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "oblo":str);
    X_8:bat[:int] := sql.bind(X_4:int, "sys":str, "oblo":str, "a":str, 0:int);
    X_11:bat[:int] := sql.emptybind(X_4:int, "sys":str, "oblo":str, "a":str, 1:int);
    (X_13:bat[:oid], X_14:bat[:int]) := sql.emptybind(X_4:int, "sys":str, "oblo":str, "a":str, 2:int);
    X_16:bat[:int] := sql.delta(X_8:bat[:int], X_13:bat[:oid], X_14:bat[:int], X_11:bat[:int]);
    X_17:bat[:int] := algebra.projection(C_5:bat[:oid], X_16:bat[:int]);
    (X_18:bat[:int], X_19:bat[:oid], X_20:bat[:oid]) := algebra.sort(X_17:bat[:int], false:bit, false:bit);
    X_23:bat[:int] := algebra.projection(X_19:bat[:oid], X_17:bat[:int]);
    X_25:bat[:str] := bat.new(nil:str);
    X_27:bat[:str] := bat.new(nil:str);
    X_28:bat[:str] := bat.new(nil:str);
    X_29:bat[:int] := bat.new(nil:int);
    X_31:bat[:int] := bat.new(nil:int);
    X_32:bat[:str] := bat.append(X_25:bat[:str], "sys.oblo":str);
    X_34:bat[:str] := bat.append(X_27:bat[:str], "a":str);
    X_35:bat[:str] := bat.append(X_28:bat[:str], "int":str);
    X_37:bat[:int] := bat.append(X_29:bat[:int], 32:int);
    X_39:bat[:int] := bat.append(X_31:bat[:int], 0:int);
    sql.resultSet(X_32:bat[:str], X_34:bat[:str], X_35:bat[:str], X_37:bat[:int], X_39:bat[:int], X_23:bat[:int]);
end user.s18_1;
#inline               actions= 0 time=2 usec 
#candidates           actions= 1 time=20 usec 
#remap                actions= 0 time=4 usec 
#deadcode             actions= 0 time=9 usec 
#multiplex            actions= 0 time=4 usec 
#generator            actions= 0 time=3 usec 
#profiler             actions= 1 time=19 usec 
#garbageCollector     actions= 1 time=29 usec 
#total                actions= 1 time=126 usec 
#EXPLAIN select * from oblo ORDER BY a OFFSET 2;
% .explain # table_name
% mal # name
% clob # type
% 115 # length
function user.s20_1():void;
    X_1:void := querylog.define("explain select * from oblo order by a offset 2;":str, "minimal_pipe":str, 29:int);
    X_4:int := sql.mvc();
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "oblo":str);
    X_8:bat[:int] := sql.bind(X_4:int, "sys":str, "oblo":str, "a":str, 0:int);
    X_11:bat[:int] := sql.emptybind(X_4:int, "sys":str, "oblo":str, "a":str, 1:int);
    (X_13:bat[:oid], X_14:bat[:int]) := sql.emptybind(X_4:int, "sys":str, "oblo":str, "a":str, 2:int);
    X_16:bat[:int] := sql.delta(X_8:bat[:int], X_13:bat[:oid], X_14:bat[:int], X_11:bat[:int]);
    X_17:bat[:int] := algebra.projection(C_5:bat[:oid], X_16:bat[:int]);
    (X_18:bat[:int], X_19:bat[:oid], X_20:bat[:oid]) := algebra.sort(X_17:bat[:int], false:bit, false:bit);
    X_23:bat[:int] := algebra.projection(X_19:bat[:oid], X_17:bat[:int]);
    X_24:lng := calc.lng(2:lng);
    X_26:lng := calc.lng(nil:lng);
    X_28:lng := calc.+(X_24:lng, X_26:lng);
    X_29:lng := calc.-(X_28:lng, 1:int);
    C_30:bat[:oid] := algebra.subslice(X_23:bat[:int], X_24:lng, X_29:lng);
    X_31:bat[:int] := algebra.projection(C_30:bat[:oid], X_23:bat[:int]);
    X_33:bat[:str] := bat.new(nil:str);
    X_35:bat[:str] := bat.new(nil:str);
    X_36:bat[:str] := bat.new(nil:str);
    X_37:bat[:int] := bat.new(nil:int);
    X_39:bat[:int] := bat.new(nil:int);
    X_40:bat[:str] := bat.append(X_33:bat[:str], "sys.oblo":str);
    X_42:bat[:str] := bat.append(X_35:bat[:str], "a":str);
    X_44:bat[:str] := bat.append(X_36:bat[:str], "int":str);
    X_46:bat[:int] := bat.append(X_37:bat[:int], 32:int);
    X_48:bat[:int] := bat.append(X_39:bat[:int], 0:int);
    sql.resultSet(X_40:bat[:str], X_42:bat[:str], X_44:bat[:str], X_46:bat[:int], X_48:bat[:int], X_31:bat[:int]);
end user.s20_1;
#inline               actions= 0 time=3 usec 
#candidates           actions= 1 time=32 usec 
#remap                actions= 0 time=5 usec 
#deadcode             actions= 0 time=10 usec 
#multiplex            actions= 0 time=5 usec 
#generator            actions= 0 time=2 usec 
#profiler             actions= 1 time=29 usec 
#garbageCollector     actions= 1 time=39 usec 
#total                actions= 1 time=162 usec 
#EXPLAIN select * from oblo ORDER BY a LIMIT 2;
% .explain # table_name
% mal # name
% clob # type
% 114 # length
function user.s22_1():void;
    X_1:void := querylog.define("explain select * from oblo order by a limit 2;":str, "minimal_pipe":str, 35:int);
    X_4:int := sql.mvc();
    X_5:lng := calc.lng(2:lng);
    C_7:bat[:oid] := sql.tid(X_4:int, "sys":str, "oblo":str);
    X_10:bat[:int] := sql.bind(X_4:int, "sys":str, "oblo":str, "a":str, 0:int);
    X_13:bat[:int] := sql.emptybind(X_4:int, "sys":str, "oblo":str, "a":str, 1:int);
    (X_15:bat[:oid], X_16:bat[:int]) := sql.emptybind(X_4:int, "sys":str, "oblo":str, "a":str, 2:int);
    X_18:bat[:int] := sql.delta(X_10:bat[:int], X_15:bat[:oid], X_16:bat[:int], X_13:bat[:int]);
    X_19:bat[:int] := algebra.projection(C_7:bat[:oid], X_18:bat[:int]);
    X_20:lng := calc.lng(0:lng);
    X_22:lng := calc.+(X_20:lng, X_5:lng);
    C_23:bat[:oid] := algebra.firstn(X_19:bat[:int], X_22:lng, true:bit, false:bit);
    X_26:bat[:int] := algebra.projection(C_23:bat[:oid], X_19:bat[:int]);
    (X_28:bat[:int], X_29:bat[:oid], X_30:bat[:oid]) := algebra.sort(X_26:bat[:int], false:bit, false:bit);
    X_31:bat[:int] := algebra.projection(X_29:bat[:oid], X_26:bat[:int]);
    X_32:lng := calc.lng(2:lng);
    X_33:lng := calc.lng(0:lng);
    X_34:lng := calc.+(X_33:lng, X_32:lng);
    X_35:lng := calc.-(X_34:lng, 1:int);
    C_36:bat[:oid] := algebra.subslice(X_31:bat[:int], X_33:lng, X_35:lng);
    X_37:bat[:int] := algebra.projection(C_36:bat[:oid], X_31:bat[:int]);
    X_39:bat[:str] := bat.new(nil:str);
    X_41:bat[:str] := bat.new(nil:str);
    X_42:bat[:str] := bat.new(nil:str);
    X_43:bat[:int] := bat.new(nil:int);
    X_45:bat[:int] := bat.new(nil:int);
    X_46:bat[:str] := bat.append(X_39:bat[:str], "sys.oblo":str);
    X_48:bat[:str] := bat.append(X_41:bat[:str], "a":str);
    X_50:bat[:str] := bat.append(X_42:bat[:str], "int":str);
    X_52:bat[:int] := bat.append(X_43:bat[:int], 32:int);
    X_54:bat[:int] := bat.append(X_45:bat[:int], 0:int);
    sql.resultSet(X_46:bat[:str], X_48:bat[:str], X_50:bat[:str], X_52:bat[:int], X_54:bat[:int], X_37:bat[:int]);
end user.s22_1;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=3 usec 
#deadcode             actions= 1 time=5 usec 
#multiplex            actions= 0 time=1 usec 
#profiler             actions= 1 time=1 usec 
#candidates           actions= 1 time=0 usec 
#garbagecollector     actions= 1 time=8 usec 
#EXPLAIN select * from oblo ORDER BY a LIMIT 2 OFFSET 1;
% .explain # table_name
% mal # name
% clob # type
% 123 # length
function user.s24_1():void;
    X_1:void := querylog.define("explain select * from oblo order by a limit 2 offset 1;":str, "minimal_pipe":str, 37:int);
    X_4:int := sql.mvc();
    X_5:lng := calc.lng(2:lng);
    X_7:lng := calc.lng(1:lng);
    X_9:lng := calc.+(X_5:lng, X_7:lng);
    C_10:bat[:oid] := sql.tid(X_4:int, "sys":str, "oblo":str);
    X_13:bat[:int] := sql.bind(X_4:int, "sys":str, "oblo":str, "a":str, 0:int);
    X_16:bat[:int] := sql.emptybind(X_4:int, "sys":str, "oblo":str, "a":str, 1:int);
    (X_18:bat[:oid], X_19:bat[:int]) := sql.emptybind(X_4:int, "sys":str, "oblo":str, "a":str, 2:int);
    X_21:bat[:int] := sql.delta(X_13:bat[:int], X_18:bat[:oid], X_19:bat[:int], X_16:bat[:int]);
    X_22:bat[:int] := algebra.projection(C_10:bat[:oid], X_21:bat[:int]);
    X_23:lng := calc.lng(0:lng);
    X_25:lng := calc.+(X_23:lng, X_9:lng);
    C_26:bat[:oid] := algebra.firstn(X_22:bat[:int], X_25:lng, true:bit, false:bit);
    X_29:bat[:int] := algebra.projection(C_26:bat[:oid], X_22:bat[:int]);
    (X_31:bat[:int], X_32:bat[:oid], X_33:bat[:oid]) := algebra.sort(X_29:bat[:int], false:bit, false:bit);
    X_34:bat[:int] := algebra.projection(X_32:bat[:oid], X_29:bat[:int]);
    X_35:lng := calc.lng(2:lng);
    X_36:lng := calc.lng(1:lng);
    X_37:lng := calc.+(X_36:lng, X_35:lng);
    X_38:lng := calc.-(X_37:lng, 1:int);
    C_39:bat[:oid] := algebra.subslice(X_34:bat[:int], X_36:lng, X_38:lng);
    X_40:bat[:int] := algebra.projection(C_39:bat[:oid], X_34:bat[:int]);
    X_42:bat[:str] := bat.new(nil:str);
    X_44:bat[:str] := bat.new(nil:str);
    X_45:bat[:str] := bat.new(nil:str);
    X_46:bat[:int] := bat.new(nil:int);
    X_48:bat[:int] := bat.new(nil:int);
    X_49:bat[:str] := bat.append(X_42:bat[:str], "sys.oblo":str);
    X_51:bat[:str] := bat.append(X_44:bat[:str], "a":str);
    X_53:bat[:str] := bat.append(X_45:bat[:str], "int":str);
    X_55:bat[:int] := bat.append(X_46:bat[:int], 32:int);
    X_57:bat[:int] := bat.append(X_48:bat[:int], 0:int);
    sql.resultSet(X_49:bat[:str], X_51:bat[:str], X_53:bat[:str], X_55:bat[:int], X_57:bat[:int], X_40:bat[:int]);
end user.s24_1;
#inline               actions= 0 time=3 usec 
#candidates           actions= 1 time=37 usec 
#remap                actions= 0 time=5 usec 
#deadcode             actions= 0 time=11 usec 
#multiplex            actions= 0 time=5 usec 
#generator            actions= 0 time=3 usec 
#profiler             actions= 1 time=34 usec 
#garbageCollector     actions= 1 time=43 usec 
#total                actions= 1 time=178 usec 
#EXPLAIN select * from oblo ORDER BY a LIMIT 1 OFFSET 2;
% .explain # table_name
% mal # name
% clob # type
% 123 # length
function user.s26_1():void;
    X_1:void := querylog.define("explain select * from oblo order by a limit 1 offset 2;":str, "minimal_pipe":str, 37:int);
    X_4:int := sql.mvc();
    X_5:lng := calc.lng(1:lng);
    X_7:lng := calc.lng(2:lng);
    X_9:lng := calc.+(X_5:lng, X_7:lng);
    C_10:bat[:oid] := sql.tid(X_4:int, "sys":str, "oblo":str);
    X_13:bat[:int] := sql.bind(X_4:int, "sys":str, "oblo":str, "a":str, 0:int);
    X_16:bat[:int] := sql.emptybind(X_4:int, "sys":str, "oblo":str, "a":str, 1:int);
    (X_18:bat[:oid], X_19:bat[:int]) := sql.emptybind(X_4:int, "sys":str, "oblo":str, "a":str, 2:int);
    X_21:bat[:int] := sql.delta(X_13:bat[:int], X_18:bat[:oid], X_19:bat[:int], X_16:bat[:int]);
    X_22:bat[:int] := algebra.projection(C_10:bat[:oid], X_21:bat[:int]);
    X_23:lng := calc.lng(0:lng);
    X_25:lng := calc.+(X_23:lng, X_9:lng);
    C_26:bat[:oid] := algebra.firstn(X_22:bat[:int], X_25:lng, true:bit, false:bit);
    X_29:bat[:int] := algebra.projection(C_26:bat[:oid], X_22:bat[:int]);
    (X_31:bat[:int], X_32:bat[:oid], X_33:bat[:oid]) := algebra.sort(X_29:bat[:int], false:bit, false:bit);
    X_34:bat[:int] := algebra.projection(X_32:bat[:oid], X_29:bat[:int]);
    X_35:lng := calc.lng(1:lng);
    X_36:lng := calc.lng(2:lng);
    X_37:lng := calc.+(X_36:lng, X_35:lng);
    X_38:lng := calc.-(X_37:lng, 1:int);
    C_39:bat[:oid] := algebra.subslice(X_34:bat[:int], X_36:lng, X_38:lng);
    X_40:bat[:int] := algebra.projection(C_39:bat[:oid], X_34:bat[:int]);
    X_42:bat[:str] := bat.new(nil:str);
    X_44:bat[:str] := bat.new(nil:str);
    X_45:bat[:str] := bat.new(nil:str);
    X_46:bat[:int] := bat.new(nil:int);
    X_48:bat[:int] := bat.new(nil:int);
    X_49:bat[:str] := bat.append(X_42:bat[:str], "sys.oblo":str);
    X_51:bat[:str] := bat.append(X_44:bat[:str], "a":str);
    X_53:bat[:str] := bat.append(X_45:bat[:str], "int":str);
    X_55:bat[:int] := bat.append(X_46:bat[:int], 32:int);
    X_57:bat[:int] := bat.append(X_48:bat[:int], 0:int);
    sql.resultSet(X_49:bat[:str], X_51:bat[:str], X_53:bat[:str], X_55:bat[:int], X_57:bat[:int], X_40:bat[:int]);
end user.s26_1;
#inline               actions= 0 time=3 usec 
#candidates           actions= 1 time=48 usec 
#remap                actions= 0 time=5 usec 
#deadcode             actions= 0 time=12 usec 
#multiplex            actions= 0 time=4 usec 
#generator            actions= 0 time=2 usec 
#profiler             actions= 1 time=35 usec 
#garbageCollector     actions= 1 time=44 usec 
#total                actions= 1 time=192 usec 
#select * from oblo;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 4	]
[ 3	]
[ 2	]
[ 1	]
#select * from oblo OFFSET 2;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 2	]
[ 1	]
#select * from oblo LIMIT 2;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 4	]
[ 3	]
#select * from oblo LIMIT 1 OFFSET 2;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 2	]
#select * from oblo LIMIT 2 OFFSET 1;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 3	]
[ 2	]
#select * from oblo ORDER BY a;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 1	]
[ 2	]
[ 3	]
[ 4	]
#select * from oblo ORDER BY a OFFSET 2;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 3	]
[ 4	]
#select * from oblo ORDER BY a LIMIT 2;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 1	]
[ 2	]
#select * from oblo ORDER BY a LIMIT 2 OFFSET 1;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 2	]
[ 3	]
#select * from oblo ORDER BY a LIMIT 1 OFFSET 2;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 3	]

# 21:05:24 >  
# 21:05:24 >  Done.
# 21:05:24 >  

