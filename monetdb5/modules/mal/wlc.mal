# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0.  If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright 1997 - July 2008 CWI, August 2008 - 2018 MonetDB B.V.

module wlc;

pattern init()
address WLCinitCmd
comment "Test for running as master";

pattern master()
address WLCmaster
comment "Activate the workload-capture-replay process";

pattern master(path:str)
address WLCmaster
comment "Activate the workload-capture-replay process. Use a different location for the logs.";

pattern stopmaster()
address WLCstopmaster
comment "Stop capturing the logs";

pattern setmasterbeat(duration:int)
address WLCsetmasterbeat
comment "Maximal delay for transaction log flushing";

pattern getmasterbeat(duration:int):str
address WLCgetmasterbeat
comment "Maximal delay for transaction log flushing";

pattern getmasterclock():str
address WLCgetmasterclock
comment "Timestamp of last update transaction";

pattern getmastertick():lng
address WLCgetmastertick
comment "Transaction identifier of the last committed transaction";

pattern rollback()
address WLCrollbackCmd
comment "Mark the end of the work unit";

pattern commit()
address WLCcommitCmd
comment "Mark the end of the work unit";

pattern query(q:str)
address WLCquery
comment "Keep the queries for replay.";

pattern catalog(q:str)
address WLCcatalog
comment "Keep the catalog changing queries for replay. ";

pattern action(q:str)
address WLCaction
comment "Keep the database changing queries for replay. ";

pattern append(sname:str, tname:str, cname:str, ins:any):int
address WLCappend
comment "Keep the insertions in the workload-capture-replay list";

pattern update(sname:str, tname:str, cname:str, tid:any, val:any):int
address WLCupdate
comment "Keep the update in the workload-capture-replay list";

pattern delete(sname:str, tname:str, b:any):int
address WLCdelete
comment "Keep the deletions in the workload-capture-replay list";

pattern clear_table(sname:str, tname:str):int
address WLCclear_table
comment "Keep the deletions in the workload-capture-replay list";

pattern commit()
address WLCcommitCmd
comment "Commit the workload-capture-replay record";

pattern rollback()
address WLCcommitCmd
comment "Rollback the workload-capture-replay record";

# The wrapping of the catalog and transaction operations
pattern create_seq( sname:str, seqname:str, action:int)
address WLCgeneric
comment "Catalog operation create_seq";

pattern alter_seq( sname:str, seqname:str, val:lng)
address WLCgeneric
comment "Catalog operation alter_seq";

pattern drop_seq( sname:str, nme:str, action:int)
address WLCgeneric
comment "Catalog operation drop_seq";

pattern create_schema(sname:str, auth:str, ifnotexists:int, action:int)
address WLCgeneric
comment "Catalog operation create_schema";

pattern drop_schema( sname:str, s:str, ifexists:int, action:int)
address WLCgeneric
comment "Catalog operation drop_schema";

pattern create_table(sname:str, tname:str, temp:int)
address WLCgeneric
comment "Catalog operation create_table";

pattern create_view(sname:str, tname:str, temp:int)
address WLCgeneric
comment "Catalog operation create_view";

pattern drop_table( sname:str, name:str, action:int, ifexists:int)
address WLCgeneric
comment "Catalog operation drop_table";

pattern drop_view( sname:str, name:str, action:int, ifexists:int)
address WLCgeneric
comment "Catalog operation drop_view";

pattern drop_constraint( sname:str, name:str, action:int, ifexists:int)
address WLCgeneric
comment "Catalog operation drop_constraint";

pattern alter_table( sname:str, tname:str, action:int)
address WLCgeneric
comment "Catalog operation alter_table";

pattern create_type( sname:str, nme:str, impl:str)
address WLCgeneric
comment "Catalog operation create_type";

pattern drop_type( sname:str, nme:str, action:int)
address WLCgeneric
comment "Catalog operation drop_type";

pattern grant_roles( sname:str, auth:str, grantor:int, admin:int)
address WLCgeneric
comment "Catalog operation grant_roles";

pattern revoke_roles( sname:str, auth:str, grantor:int, admin:int)
address WLCgeneric
comment "Catalog operation revoke_roles";

pattern grant( sname:str, tbl:str, grantee:str, privs:int, cname:str, gr:int, grantor:int)
address WLCgeneric
comment "Catalog operation grant";

pattern revoke ( sname:str, tbl:str, grantee:str, privs:int, cname:str,grant:int, grantor:int)
address WLCgeneric
comment "Catalog operation revoke";

pattern grant_function( sname:str, fcnid:int, grantee:str, privs:int, grant:int, grantor:int)
address WLCgeneric
comment "Catalog operation grant_function";

pattern revoke_function( sname:str, fcnid:int, grantee:str, privs:int, grant:int, grantor:int)
address WLCgeneric
comment "Catalog operation revoke_function";

pattern create_user( sname:str, passwrd:str, enc:int, schema:str, fullname:str)
address WLCgeneric
comment "Catalog operation create_user";

pattern drop_user(sname:str, action:int)
address WLCgeneric
comment "Catalog operation drop_user";

pattern drop_user(sname:str, auth:str, action:int)
address WLCgeneric
comment "Catalog operation drop_user";

pattern alter_user( sname:str, passwrd:str, enc:int, schema:str, oldpasswrd:str)
address WLCgeneric
comment "Catalog operation alter_user";

pattern rename_user( sname:str, newnme:str, action:int)
address WLCgeneric
comment "Catalog operation rename_user";

pattern create_role(sname:str,role:str,grator:int)
address WLCgeneric
comment "Catalog operation create_role";

pattern drop_role( auth:str, role:str, action:int)
address WLCgeneric
comment "Catalog operation drop_role";
pattern drop_role( role:str, action:int)
address WLCgeneric
comment "Catalog operation drop_role";

pattern drop_index( sname:str, iname:str, action:int)
address WLCgeneric
comment "Catalog operation drop_index";

pattern drop_function( sname:str, fname:str, fid:int, type:int, action:int)
address WLCgeneric
comment "Catalog operation drop_function";

pattern create_function( sname:str, fname:str)
address WLCgeneric
comment "Catalog operation create_function";

pattern create_trigger( sname:str, tname:str, triggername:str, time:int, orientation:int, event:int, old:str, new:str, cond:str, qry:str)
address WLCgeneric
comment "Catalog operation create_trigger";

pattern drop_trigger(sname:str, nme:str, ifexists:int)
address WLCgeneric
comment "Catalog operation drop_trigger";

pattern alter_add_table( sname:str, mtnme:str, psnme:str, ptnme:str, action:int)
address WLCgeneric
comment "Catalog operation alter_add_table";

pattern alter_del_table( sname:str, mtnme:str, psnme:str, ptnme:str, action:int)
address WLCgeneric
comment "Catalog operation alter_del_table";

pattern alter_set_table( sname:str, tnme:str, access:int)
address WLCgeneric
comment "Catalog operation alter_set_table";

pattern comment_on(objid:int, remark:str)
address WLCgeneric
comment "Catalog operation comment_on";

pattern transaction_release(chain:int,name:str):void
address WLCgeneric
comment "A transaction statement (type can be commit,release,rollback or start)";

pattern transaction_commit(chain:int,name:str):void
address WLCgeneric
comment "A transaction statement (type can be commit,release,rollback or start)";

pattern transaction_rollback(chain:int,name:str):void
address WLCgeneric
comment "A transaction statement (type can be commit,release,rollback or start)";

pattern transaction_begin(chain:int,name:str):void
address WLCgeneric
comment "A transaction statement (type can be commit,release,rollback or start)";

unsafe pattern transaction()
address WLCgeneric
comment "Start an autocommit transaction";
